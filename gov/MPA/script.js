// DOM Elements
const personSelect = document.getElementById('person-select');
const districtDisplay = document.getElementById('district-display');
const provinceDisplay = document.getElementById('province-display');
const subdistrictSelect = document.getElementById('subdistrict-select');
const plotSelect = document.getElementById('plot-select');
const plotStatus = document.getElementById('plot-status');
const submitBtn = document.getElementById('submit-btn');
const registrationsTable = document.getElementById('registrations-table').getElementsByTagName('tbody')[0];
const registrationForm = document.getElementById('land-registration-form');

let initialData = {};
let landStatus = {};
let registrations = [];

const GAS_URL = 'https://script.google.com/macros/s/AKfycbx7vxT6fp2btcHChEilWByAUmI1DG34YvoIs1MH7KnB842ArVYyHXUqT825xBBntxAh/exec';


// ‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', init);

// üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
async function init() {
  try {
    await fetchInitialData(); // ‡πÇ‡∏´‡∏•‡∏î data.json
    await loadData();         // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å Google Sheet
    setupEventListeners();    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
    alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ");
  }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å data.json
function fetchInitialData() {
  return fetch('data.json')
    .then(res => res.json())
    .then(data => {
      initialData = data;
    });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
function loadData() {
  return fetch(`${GAS_URL}?action=loadData`)
    .then(res => res.json())
    .then(data => {
      window.appData = {
        persons: initialData.persons,
        subdistricts: initialData.subdistricts,
        registrations: data.registrations,
        landStatus: initializeLandStatus()
      };
      updateLandStatusFromRegistrations();
      populatePersonSelect();
      renderRegistrationsTable();
    });
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
function initializeLandStatus() {
  const statusMap = {};
  for (const [district, subdistricts] of Object.entries(initialData.subdistricts)) {
    subdistricts.forEach(sub => {
      statusMap[`${district}-${sub}`] = { plots: Array(8).fill('available') }; // A-H
    });
  }
  return statusMap;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
function updateLandStatusFromRegistrations() {
  registrations = window.appData.registrations;
  landStatus = window.appData.landStatus;

  registrations.forEach(reg => {
    const key = `${reg.district}-${reg.subdistrict}`;
    if (reg.plot && typeof reg.plot === 'string') {
      const plotIndex = reg.plot.charCodeAt(0) - 65;
      if (landStatus[key]) {
        landStatus[key].plots[plotIndex] = reg.status;
      }
    }
  });
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô UI
function setupEventListeners() {
  personSelect.addEventListener('change', function () {
    const personId = parseInt(this.value);
    const person = initialData.persons.find(p => p.id === personId);
    if (person) {
      districtDisplay.value = person.district;
      provinceDisplay.value = person.province;
      subdistrictSelect.disabled = false;
      populateSubdistrictSelect(person.district);
    } else {
      districtDisplay.value = '';
      provinceDisplay.value = '';
      subdistrictSelect.disabled = true;
      subdistrictSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á --</option>';
      plotSelect.disabled = true;
      plotSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô --</option>';
      plotStatus.textContent = '';
    }
  });

  subdistrictSelect.addEventListener('change', function () {
    const district = districtDisplay.value;
    const subdistrict = this.value;
    if (district && subdistrict) {
      plotSelect.disabled = false;
      populatePlotSelect(district, subdistrict);
    } else {
      plotSelect.disabled = true;
      plotSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô --</option>';
      plotStatus.textContent = '';
    }
  });

  plotSelect.addEventListener('change', function () {
    const district = districtDisplay.value;
    const subdistrict = subdistrictSelect.value;
    const plot = this.value;
    updatePlotStatusDisplay(district, subdistrict, plot);
  });

  registrationForm.addEventListener('submit', function (e) {
    e.preventDefault();
    registerLand();
  });
}

// ‡πÄ‡∏ï‡∏¥‡∏° dropdown "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á"
function populatePersonSelect() {
  personSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á --</option>';
  initialData.persons.forEach(person => {
    const option = document.createElement('option');
    option.value = person.id;
    option.textContent = person.name;
    personSelect.appendChild(option);
  });
}

// ‡πÄ‡∏ï‡∏¥‡∏° dropdown "‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"
function populateSubdistrictSelect(district) {
  subdistrictSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á --</option>';
  initialData.subdistricts[district]?.forEach(subdistrict => {
    const option = document.createElement('option');
    option.value = subdistrict;
    option.textContent = subdistrict;
    subdistrictSelect.appendChild(option);
  });
}

// ‡πÄ‡∏ï‡∏¥‡∏° dropdown "‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô"
function populatePlotSelect(district, subdistrict) {
  plotSelect.innerHTML = '<option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô --</option>';
  const key = `${district}-${subdistrict}`;
  if (landStatus[key]) {
    for (let i = 0; i < 8; i++) {
      const letter = String.fromCharCode(65 + i); // A-H
      const option = document.createElement('option');
      option.value = letter;
      option.textContent = `‡πÅ‡∏õ‡∏•‡∏á ${letter}`;
      plotSelect.appendChild(option);
    }
  }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏õ‡∏•‡∏á
function updatePlotStatusDisplay(district, subdistrict, plot) {
  const key = `${district}-${subdistrict}`;
  const plotIndex = plot.charCodeAt(0) - 65;
  if (landStatus[key]) {
    const status = landStatus[key].plots[plotIndex];
    plotStatus.textContent = '';
    plotStatus.className = '';
    if (status === 'available') {
      plotStatus.textContent = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ß‡πà‡∏≤‡∏á';
      plotStatus.classList.add('status-available');
    } else if (status === 'reserved') {
      plotStatus.textContent = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á';
      plotStatus.classList.add('status-reserved');
    } else if (status === 'suspended') {
      plotStatus.textContent = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏∞‡∏á‡∏±‡∏ö';
      plotStatus.classList.add('status-suspended');
    }
  }
}

// ‡∏à‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô
function registerLand() {
  const personId = parseInt(personSelect.value);
  const person = initialData.persons.find(p => p.id === personId);
  const district = districtDisplay.value;
  const subdistrict = subdistrictSelect.value;
  const plot = plotSelect.value;

  if (!person || !district || !subdistrict || !plot) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    return;
  }

  const alreadyRegistered = registrations.some(reg => reg.personId === personId);
  if (alreadyRegistered) {
    alert('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    return;
  }

  const key = `${district}-${subdistrict}`;
  const plotIndex = plot.charCodeAt(0) - 65;

  if (landStatus[key]?.plots[plotIndex] !== 'available') {
    alert('‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    return;
  }

  const registration = {
    id: Date.now(),
    personId: person.id,
    personName: person.name,
    district,
    province: person.province,
    subdistrict,
    plot,
    status: 'reserved',
    registrationDate: new Date().toISOString()
  };

  fetch(`${GAS_URL}?action=saveRegistration`, {
    method: 'POST',
    body: JSON.stringify(registration),
    headers: { 'Content-Type': 'application/json' }
  }).then(() => {
    alert('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
    loadData();
    registrationForm.reset();
    subdistrictSelect.disabled = true;
    plotSelect.disabled = true;
    plotStatus.textContent = '';
  });
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function renderRegistrationsTable() {
  const tbody = document.getElementById('registrations-table-body');
  tbody.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà

  registrations.forEach(reg => {
    const statusText = {
      reserved: '‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á',
      suspended: '‡∏£‡∏∞‡∏á‡∏±‡∏ö'
    }[reg.status] || '‡∏ß‡πà‡∏≤‡∏á';

    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${reg.id}</td>
      <td>${reg.personName}</td>
      <td>${reg.district}</td>
      <td>${reg.province}</td>
      <td>${reg.subdistrict}</td>
      <td>‡πÅ‡∏õ‡∏•‡∏á ${reg.plot}</td>
      <td>${statusText}</td>
    `;
    tbody.appendChild(row);
  });
}
